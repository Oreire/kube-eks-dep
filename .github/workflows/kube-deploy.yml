name: Deploy and Clean EKS Infrastructure

on:
  push:
    branches: [main]

jobs:
  deploy-vpc:
    name: 🌐 Deploy VPC
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: KubeNet

    steps:
      - name: ⬇️ Checkout Code
        uses: actions/checkout@v3

      - name: 🔐 Configure AWS
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }} 
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-2

      - name: ⚙️ Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: 🧱 Init VPC
        run: terraform init
      
      - name: 🔎 Validate VPC
        run: terraform validate


      - name: 📋 Plan VPC
        run: terraform plan -out=tfplan 

      - name: ✅ Apply VPC
        run: terraform apply -auto-approve tfplan

  deploy-eks:
    name: ☸️ Deploy EKS
    needs: deploy-vpc
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: eks-cluster

    steps:
      - uses: actions/checkout@v3
      - uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-2
      - uses: hashicorp/setup-terraform@v2
      - name: 🧱 Init eks-cluster
        run: terraform init

      - name: 🔎 Validate eks-cluster
        run: terraform validate

      - name: 📋 Plan eks-cluster
        run: terraform plan -out=tfplan 

      - name: ✅ Apply eks-cluster
        run: terraform apply -auto-approve tfplan

  # deploy-app:
  deploy-app:
    name: 🚀 Deploy Web Application
    needs: deploy-eks
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: WEB
    env:
      AWS_REGION: eu-west-2
      CLUSTER_NAME: laredo-cluster  # Update if different

    steps:
      - name: 🧾 Checkout code
        uses: actions/checkout@v3

      - name: 🔐 Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: 🛠️ Install kubectl
        run: |
          KUBECTL_VERSION=$(curl -s https://dl.k8s.io/release/stable.txt)
          curl -LO "https://dl.k8s.io/release/${KUBECTL_VERSION}/bin/linux/amd64/kubectl"
          chmod +x kubectl && sudo mv kubectl /usr/local/bin/

      - name: 📡 Update kubeconfig
        run: aws eks update-kubeconfig --region $AWS_REGION --name $CLUSTER_NAME
      
      - name: 🔍 Verify kube context
        run: kubectl config current-context
    
      - name: ✅ Confirm nodes are ready
        run: kubectl get nodes --no-headers | grep -c ' Ready'
      
      - name: 🚀 Apply Kubernetes manifests
        run: |
          kubectl apply -f web-deploy.yaml
          kubectl apply -f web-svc.yaml

      - name: ✅ Verify Deployment
        run: kubectl get deployment ghs-web -n coweb-ns

      - name: ✅ Verify Service Exposure
        run: kubectl get svc ghs-service -n coweb-ns

      - name: ✅ Verify rollout
        run: kubectl rollout status deployment/ghs-web -n coweb-ns

  teardown:
    name: 🧹 Teardown Infra (auto after delay)
    needs: deploy-app
    runs-on: ubuntu-latest
    steps:
      - name: ⏲️ Wait for 2 minutes
        run: sleep 120

      - name: ⬇️ Checkout Code
        uses: actions/checkout@v3

      - name: 🔐 Configure AWS
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-2

      - name: ⚙️ Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: 🧹 Destroy EKS
        run: |
           cd eks-cluster
           terraform init
           terraform destroy -auto-approve

      - name: 🌐 Destroy VPC
        run: |
          cd ../KubeNet
          terraform init
          terraform destroy -auto-approve
# Uncomment the following section if you want to include a manual clean-up job

  # clean-up:
  #  name: 🧹 Clean Up All Resources
  #  runs-on: ubuntu-latest
  #  needs: [deploy-eks, verify-eks]

  #  steps:
  #   - uses: actions/checkout@v3

  #   - uses: aws-actions/configure-aws-credentials@v2
  #     with:
  #       aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #       aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #       aws-region: eu-west-2

  #   - uses: hashicorp/setup-terraform@v2

  #   - name: ⏳ Wait 5 minutes before cleanup
  #     run: sleep 300

  #   - name: 🧱 Init Terraform
  #     run: terraform init

  #   - name: 📋 Plan Destroy Everything
  #     run: terraform plan -destroy -out=tfplan

  #   - name: ✅ Apply Full Destroy
  #     run: terraform apply -auto-approve tfplan

