name: Deploy and Clean EKS Infrastructure

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      auto_destroy:
        description: 'Destroy Infra? (true/false)'
        required: true
        default: 'false'
        
jobs:
  deploy-vpc:
    name: 🌐 Deploy VPC
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: KubeNet

    steps:
      - name: ⬇️ Checkout Code
        uses: actions/checkout@v3

      - name: 🔐 Configure AWS
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }} 
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-2

      - name: ⚙️ Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: 🧱 Init VPC
        run: terraform init
      
      - name: 🔎 Validate VPC
        run: terraform validate


      - name: 📋 Plan VPC
        run: terraform plan -out=tfplan 

      - name: ✅ Apply VPC
        run: terraform apply -auto-approve tfplan

  deploy-eks:
    name: ☸️ Deploy EKS
    needs: deploy-vpc
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: eks-cluster

    steps:
      - uses: actions/checkout@v3
      - uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-2
      - uses: hashicorp/setup-terraform@v2
      - name: 🧱 Init eks-cluster
        run: terraform init

      - name: 🔎 Validate eks-cluster
        run: terraform validate

      - name: 📋 Plan eks-cluster
        run: terraform plan -out=tfplan 

      - name: ✅ Apply eks-cluster
        run: terraform apply -auto-approve tfplan

  # deploy-app:
  deploy-app:
    name: 🚀 Deploy Web Application
    needs: deploy-eks
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: WEB
    env:
      AWS_REGION: eu-west-2
      CLUSTER_NAME: laredo-cluster  # Update if different
      KUBECTL_VERSION: v1.30.1


    steps:
      - name: 🧾 Checkout code
        uses: actions/checkout@v3

      - name: 🔐 Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: 📦 Install kubectl
        run: |
          KUBECTL_VERSION=v1.30.1  # or use: $(curl -s https://dl.k8s.io/release/stable.txt)
          echo "Installing kubectl version $KUBECTL_VERSION"
          curl -LO "https://dl.k8s.io/release/${KUBECTL_VERSION}/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/

      - name: 📡 Update kubeconfig
        run: aws eks update-kubeconfig --region $AWS_REGION --name $CLUSTER_NAME
      
      - name: 🔍 Verify kube context
        run: kubectl config current-context
    
      - name: ✅ Confirm nodes are ready
        run: kubectl get nodes --no-headers | grep -c ' Ready'
      
      - name: 🚀 Apply Kubernetes manifests
        run: |
          kubectl apply -f web-deploy.yaml
          kubectl apply -f web-svc.yaml

      - name: ✅ Verify Deployment
        run: kubectl get deployment ghs-web -n coweb-ns

      - name: ✅ Verify Service Exposure
        run: kubectl get svc ghs-service -n coweb-ns

      - name: 🕐 Wait for LoadBalancer hostname
        run: |
          for i in {1..20}; do
            HOSTNAME=$(kubectl get svc ghs-service -n coweb-ns -o jsonpath="{.status.loadBalancer.ingress[0].hostname}")
            if [ -n "$HOSTNAME" ]; then
              echo "LoadBalancer endpoint is available at: http://$HOSTNAME"
              break
            fi
            echo "Waiting for LoadBalancer... ($i/20)"
            sleep 10
          done

      - name: 🌐 Print LoadBalancer endpoint
        run: |
          kubectl get svc ghs-service -n coweb-ns -o jsonpath="{.status.loadBalancer.ingress[0].hostname}"
          echo "LoadBalancer endpoint is available at: http://$(kubectl get svc ghs-service -n coweb-ns -o jsonpath="{.status.loadBalancer.ingress[0].hostname}")"

      - name: ✅ Verify rollout
        run: kubectl rollout status deployment/ghs-web -n coweb-ns

  teardown-infra:
    if: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.auto_destroy == 'true' || github.event_name == 'push' }}
    name: 🧹 Teardown Infra (auto after delay)
    needs: deploy-app
    runs-on: ubuntu-latest
    env:
      CLUSTER_NAME: laredo-cluster
      AWS_REGION: eu-west-2
    steps:
      - name: ⏲️ Wait for 1 minute
        run: sleep 60

      - name: ⬇️ Checkout Code
        uses: actions/checkout@v3

      - name: 🔐 Configure AWS
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-2

      - name: 📡 Safe kubeconfig update
        uses: ./.github/actions/update-kubeconfig-safe
        with:
          cluster_name: laredo-cluster
          region: eu-west-2

      - name: 📦 Delete Kubernetes Resources
        run: |
          kubectl delete deploy/ghs-web -n coweb-ns || true
          kubectl delete svc/ghs-service -n coweb-ns || true
          kubectl delete namespace coweb-ns || true

      - name: ⚙️ Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: 🧹 Destroy EKS
        run: |
          cd eks-cluster
          terraform init
          terraform destroy -auto-approve

      - name: 🧼 Cleanup AWS Residuals
        uses: ./.github/actions/aws-cleanup-residuals
        with:
          vpc_id: vpc-053777b02af3df06d  # Update to reflect the correct environment-specific VPC ID

      - name: 🌐 Destroy VPC
        run: |
          cd KubeNet
          terraform init
          terraform destroy -auto-approve
     

  # teardown-infra:
  #   if: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.auto_destroy == 'true' || github.event_name == 'push' }}
  #   name: 🧹 Teardown Infra (auto after delay)
  #   needs: deploy-app
  #   runs-on: ubuntu-latest
  #   env:
  #     CLUSTER_NAME: laredo-cluster
  #     AWS_REGION: eu-west-2
  #   steps:
  #     - name: ⏲️ Wait for 1 minute
  #       run: sleep 60

  #     - name: ⬇️ Checkout Code
  #       uses: actions/checkout@v3

  #     - name: 🔐 Configure AWS
  #       uses: aws-actions/configure-aws-credentials@v2
  #       with:
  #         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #         aws-region: eu-west-2

  #     - name: 📦 Delete Kubernetes Resources
  #       run: |
  #         kubectl delete deploy/ghs-web -n coweb-ns || true
  #         kubectl delete svc/ghs-service -n coweb-ns || true
  #         kubectl delete namespace coweb-ns || true

  #     - name: ⚙️ Setup Terraform
  #       uses: hashicorp/setup-terraform@v2

  #     - name: 🧹 Destroy EKS
  #       run: |
  #         cd eks-cluster
  #         terraform init
  #         terraform destroy -auto-approve

  #     - name: 🧼 Cleanup AWS Residuals
  #       run: |
  #         echo "Checking for ENIs and EIPs in VPC..."
  #         VPC_ID=$(aws ec2 describe-vpcs --filters "Name=tag:Name,Values=laredo-vpc" \
  #           --query "Vpcs[0].VpcId" --output text)

  #         # Delete lingering ENIs
  #         aws ec2 describe-network-interfaces \
  #           --filters "Name=vpc-id,Values=$VPC_ID" \
  #           --query 'NetworkInterfaces[*].NetworkInterfaceId' --output text | \
  #           xargs -r -I {} aws ec2 delete-network-interface --network-interface-id {}

  #         # Release any orphaned Elastic IPs
  #         aws ec2 describe-addresses --query 'Addresses[*].AllocationId' --output text | \
  #           xargs -r -I {} aws ec2 release-address --allocation-id {}

  #         echo "Residual cleanup complete. Pausing to let AWS catch up..."
  #         sleep 30

  #     - name: 🌐 Destroy VPC
  #       run: |
  #         cd KubeNet
  #         terraform init
  #         terraform destroy -auto-approve

  #     - name: ⏲️ Wait for 1 minute
  #       run: sleep 60

  #     - name: ⬇️ Checkout Code
  #       uses: actions/checkout@v3

  #     - name: 🔐 Configure AWS
  #       uses: aws-actions/configure-aws-credentials@v2
  #       with:
  #         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #         aws-region: eu-west-2

  #     - name: 📡 Update kubeconfig
  #       run: aws eks update-kubeconfig --region $AWS_REGION --name $CLUSTER_NAME

  #     - name: 📦 Delete K8S Infra
  #       run: |
  #         kubectl delete deploy/ghs-web -n coweb-ns || true
  #         kubectl delete svc/ghs-service -n coweb-ns || true
  #         kubectl delete namespace coweb-ns || true

  #     - name: ⚙️ Setup Terraform
  #       uses: hashicorp/setup-terraform@v2

  #     - name: 🧹 Destroy EKS
  #       run: |
  #          cd eks-cluster
  #          terraform init
  #          terraform destroy -auto-approve
      
  #     - name: 🌐 Destroy VPC
  #       run: |
  #         cd KubeNet
  #         terraform init
  #         terraform destroy -auto-approve

